type Config = struct {
  admin_id: actor_id,
  admin_name: str,
  lobby_name: str,
  small_blind: u128,
  big_blind: u128,
  number_of_participants: u16,
  starting_bank: u128,
};

type PublicKey = struct {
  x: [u8, 32],
  y: [u8, 32],
  z: [u8, 32],
};

type VerifyingKeyBytes = struct {
  alpha_g1_beta_g2: vec u8,
  gamma_g2_neg_pc: vec u8,
  delta_g2_neg_pc: vec u8,
  ic: vec vec u8,
};

type Card = struct {
  value: u8,
  suit: Suit,
};

type Suit = enum {
  Spades,
  Hearts,
  Diamonds,
  Clubs,
};

type EncryptedCard = struct {
  c0: [vec u8, 3],
  c1: [vec u8, 3],
};

type VerificationVariables = struct {
  proof_bytes: ProofBytes,
  public_input: vec vec u8,
};

type ProofBytes = struct {
  a: vec u8,
  b: vec u8,
  c: vec u8,
};

type Action = enum {
  Fold,
  Call,
  Raise: struct {
    bet: u128
  },
  Check,
  AllIn,
};

type TurnManagerForActorId = struct {
  active_ids: vec actor_id,
  turn_index: u64,
};

type BettingStage = struct {
  turn: actor_id,
  last_active_time: opt u64,
  current_bet: u128,
  acted_players: vec actor_id,
};

type Participant = struct {
  name: str,
  balance: u128,
  card_1: opt u32,
  card_2: opt u32,
  pk: PublicKey,
};

type Status = enum {
  Registration,
  WaitingShuffleVerification,
  WaitingStart,
  WaitingPartialDecryptionsForPlayersCards,
  Play: struct {
    stage: Stage
  },
  WaitingForCardsToBeDisclosed,
  Finished: struct {
    winners: vec actor_id,
    cash_prize: vec u128,
  },
};

type Stage = enum {
  PreFlop,
  WaitingTableCardsAfterPreFlop,
  Flop,
  WaitingTableCardsAfterFlop,
  Turn,
  WaitingTableCardsAfterTurn,
  River,
};

constructor {
  New : (config: Config, pts_actor_id: actor_id, pk: PublicKey, vk_shuffle_bytes: VerifyingKeyBytes, vk_decrypt_bytes: VerifyingKeyBytes);
};

service Poker {
  /// Cancels player registration and refunds their balance via PTS contract.
  /// 
  /// Panics if:
  /// - current status is invalid for cancellation;
  /// - caller is not a registered player.
  /// 
  /// Sends a transfer request to PTS contract to return points to the player.
  /// Removes player data and emits `RegistrationCanceled` event on success.
  CancelRegistration : () -> null;
  CardDisclosure : (id_to_cards: vec struct { actor_id, struct { Card, Card } }) -> null;
  /// Admin-only function to forcibly remove a player and refund their balance.
  /// 
  /// Panics if:
  /// - caller is not admin or tries to delete themselves
  /// - wrong game status (not Registration/WaitingShuffleVerification)
  /// - player doesn't exist
  /// 
  /// Performs:
  /// 1. Transfers player's balance back to user via PTS contract
  /// 2. Removes player from all participant lists
  /// 3. Resets status to Registration
  /// 4. Emits PlayerDeleted event
  DeletePlayer : (player_id: actor_id) -> null;
  /// Admin-only function to terminate the lobby and refund all players.
  /// 
  /// Panics if:
  /// - caller is not admin
  /// - wrong game status (not Registration/WaitingShuffleVerification/Finished)
  /// 
  /// Performs:
  /// 1. Batch transfer of all player balances via PTS contract
  /// 2. Sends DeleteLobby request to PokerFactory
  /// 3. Emits Killed event and transfers remaining funds to inheritor
  /// 
  /// WARNING: Irreversible operation
  Kill : (inheritor: actor_id) -> null;
  /// Registers a player by sending a transfer request to the PTS contract (starting_bank points).
  /// 
  /// Panics if:
  /// - status is not `Registration`;
  /// - player is already registered.
  /// 
  /// Sends a message to the PTS contract (pts_actor_id) to transfer points to this contract.
  /// On success, updates participant data and emits a `Registered` event.
  Register : (player_name: str, pk: PublicKey) -> null;
  /// Restarts the game, resetting status and refunding bets (if not Finished).
  /// Panics if caller is not admin.
  /// Resets game to WaitingShuffleVerification (if full) or Registration status.
  /// Emits GameRestarted event with new status.
  RestartGame : () -> null;
  ShuffleDeck : (encrypted_deck: vec EncryptedCard, instances: vec VerificationVariables) -> null;
  /// Admin-only function to start the poker game after setup.
  /// 
  /// Panics if:
  /// - caller is not admin
  /// - wrong status (not WaitingStart)
  /// 
  /// Performs:
  /// 1. Deals cards to players and table
  /// 2. Processes small/big blinds (handles all-in cases)
  /// 3. Initializes betting stage
  /// 4. Updates game status and emits GameStarted event
  /// 
  /// Note: Handles edge cases where players can't cover blinds
  StartGame : () -> null;
  SubmitAllPartialDecryptions : (cards_by_player: vec struct { actor_id, [EncryptedCard, 2] }, proofs: vec VerificationVariables) -> null;
  SubmitRevealedTableCards : (new_cards: vec Card, proofs: vec VerificationVariables) -> null;
  SubmitTablePartialDecryptions : (decryptions: vec struct { EncryptedCard, [vec u8, 3] }, proofs: vec VerificationVariables) -> null;
  /// Processes player actions during betting rounds.
  /// 
  /// Panics if:
  /// - Wrong game status
  /// - Not player's turn
  /// - Invalid action (e.g. check when bet exists)
  /// 
  /// Handles:
  /// - Fold/Call/Check/Raise/AllIn actions
  /// - Turn timers and skips
  /// - Game end conditions (single player left)
  /// - Stage transitions
  /// 
  /// Emits TurnIsMade and NextStage events
  Turn : (action: Action) -> null;
  query ActiveParticipants : () -> TurnManagerForActorId;
  query AllInPlayers : () -> vec actor_id;
  query AlreadyInvestedInTheCircle : () -> vec struct { actor_id, u128 };
  query Betting : () -> opt BettingStage;
  query BettingBank : () -> vec struct { actor_id, u128 };
  query Config : () -> Config;
  query EncryptedTableCards : () -> vec EncryptedCard;
  query FactoryActorId : () -> actor_id;
  query Participants : () -> vec struct { actor_id, Participant };
  query PlayerCards : (player_id: actor_id) -> opt [EncryptedCard, 2];
  query PtsActorId : () -> actor_id;
  query RevealedTableCards : () -> vec Card;
  query Round : () -> u32;
  query Status : () -> Status;

  events {
    Registered: struct {
      participant_id: actor_id,
      pk: PublicKey,
      all_registered: bool,
    };
    PlayerDeleted: struct {
      player_id: actor_id
    };
    RegistrationCanceled: struct {
      player_id: actor_id
    };
    GameStarted;
    CardsDealtToPlayers: vec struct { actor_id, [EncryptedCard, 2] };
    CardsDealtToTable: vec EncryptedCard;
    GameRestarted: struct {
      status: Status
    };
    SmallBlindIsSet;
    BigBlindIsSet;
    TurnIsMade: struct {
      action: Action
    };
    NextStage: Stage;
    Finished: struct {
      winners: vec actor_id,
      cash_prize: vec u128,
    };
    Killed: struct {
      inheritor: actor_id
    };
  }
};
