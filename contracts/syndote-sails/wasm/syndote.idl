type PlayerInfo = struct {
  position: u8,
  balance: u32,
  debt: u32,
  in_jail: bool,
  round: u128,
  cells: vec u8,
  penalty: u8,
  lost: bool,
};

type Gear = enum {
  Bronze,
  Silver,
  Gold,
};

type StorageState = struct {
  admin: actor_id,
  properties_in_bank: vec u8,
  round: u128,
  players: vec struct { actor_id, PlayerInfo },
  players_queue: vec actor_id,
  current_player: actor_id,
  current_step: u64,
  properties: vec opt struct { actor_id, vec Gear, u32, u32 },
  ownership: vec actor_id,
  game_status: GameStatus,
  winner: actor_id,
};

type GameStatus = enum {
  Registration,
  Play,
  Finished,
};

constructor {
  New : (dns_id_and_name: opt struct { actor_id, str });
};

service Syndote {
  AddGear : (properties_for_sale: opt vec u8) -> null;
  BuyCell : (properties_for_sale: opt vec u8) -> null;
  ChangeAdmin : (admin: actor_id) -> null;
  Kill : (inheritor: actor_id) -> null;
  PayRent : (properties_for_sale: opt vec u8) -> null;
  Play : () -> null;
  Register : (player: actor_id) -> null;
  ReserveGas : () -> null;
  StartRegistration : () -> null;
  ThrowRoll : (pay_fine: bool, properties_for_sale: opt vec u8) -> Event;
  Upgrade : (properties_for_sale: opt vec u8) -> null;
  query DnsInfo : () -> opt struct { actor_id, str };
  query GetStorage : () -> StorageState;

  events {
    Registered;
    StartRegistration;
    Played;
    GameFinished: struct { winner: actor_id };
    StrategicError;
    StrategicSuccess;
    Step: struct { players: vec struct { actor_id, PlayerInfo }, properties: vec opt struct { actor_id, vec Gear, u32, u32 }, current_player: actor_id, ownership: vec actor_id, current_step: u64 };
    Jail: struct { in_jail: bool, position: u8 };
    GasReserved;
    NextRoundFromReservation;
    AdminChanged;
    Killed: struct { inheritor: actor_id };
  }
};

