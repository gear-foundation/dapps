type PlayerInfo = struct {
  position: u8,
  balance: u32,
  debt: u32,
  in_jail: bool,
  round: u128,
  cells: BTreeSetForU8,
  penalty: u8,
  lost: bool,
};

type Gear = enum {
  Bronze,
  Silver,
  Gold,
};

constructor {
  New : (dns_id_and_name: opt struct { actor_id, str });
};

service Syndote {
  Register : (player: actor_id) -> null;
  ReserveGas : () -> null;
  StartRegistration : () -> null;
  query DnsInfo : () -> opt struct { actor_id, str };

  events {
    Registered;
    StartRegistration;
    Played;
    GameFinished: struct { winner: actor_id };
    StrategicError;
    StrategicSuccess;
    Step: struct { players: vec struct { actor_id, PlayerInfo }, properties: vec opt struct { actor_id, vec Gear, u32, u32 }, current_player: actor_id, ownership: vec actor_id, current_step: u64 };
    Jail: struct { in_jail: bool, position: u8 };
    GasReserved;
    NextRoundFromReservation;
    AdminChanged;
    Killed: struct { inheritor: actor_id };
  }
};

