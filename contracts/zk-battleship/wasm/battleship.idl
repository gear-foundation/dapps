type VerifyingKeyBytes = struct {
  alpha_g1_beta_g2: vec u8,
  gamma_g2_neg_pc: vec u8,
  delta_g2_neg_pc: vec u8,
  ic: vec vec u8,
};

type Configuration = struct {
  gas_for_delete_single_game: u64,
  gas_for_delete_multiple_game: u64,
  gas_for_check_time: u64,
  gas_for_delete_session: u64,
  delay_for_delete_single_game: u32,
  delay_for_delete_multiple_game: u32,
  delay_for_check_time: u32,
  minimum_session_duration_ms: u64,
  block_duration_ms: u64,
};

type VerificationVariables = struct {
  proof_bytes: ProofBytes,
  public_input: PublicMoveInput,
};

type ProofBytes = struct {
  a: vec u8,
  b: vec u8,
  c: vec u8,
};

type PublicMoveInput = struct {
  out: u8,
  hit: u8,
  hash: vec u8,
};

type PublicStartInput = struct {
  hash: vec u8,
};

type MultipleGameState = struct {
  admin: actor_id,
  participants_data: vec struct { actor_id, ParticipantInfo },
  create_time: u64,
  start_time: opt u64,
  last_move_time: u64,
  status: Status,
  bid: u128,
};

type ParticipantInfo = struct {
  name: str,
  board: vec Entity,
  ship_hash: vec u8,
  total_shots: u8,
  succesfull_shots: u8,
};

type Entity = enum {
  Empty,
  Unknown,
  Occupied,
  Ship,
  Boom,
  BoomShip,
  DeadShip,
};

type Status = enum {
  Registration,
  VerificationPlacement: opt actor_id,
  PendingVerificationOfTheMove: struct { actor_id, u8 },
  Turn: actor_id,
};

type MultipleUtilsStepResult = enum {
  Missed,
  Injured,
  Killed,
};

type SignatureData = struct {
  key: actor_id,
  duration: u64,
  allowed_actions: vec ActionsForSession,
};

type ActionsForSession = enum {
  PlaySingleGame,
  PlayMultipleGame,
};

type Session = struct {
  key: actor_id,
  expires: u64,
  allowed_actions: vec ActionsForSession,
  expires_at_block: u32,
};

type SingleGame = struct {
  player_board: vec Entity,
  ship_hash: vec u8,
  bot_ships: Ships,
  start_time: u64,
  total_shots: u8,
  succesfull_shots: u8,
  last_move_time: u64,
  verification_requirement: opt u8,
};

type Ships = struct {
  ship_1: vec u8,
  ship_2: vec u8,
  ship_3: vec u8,
  ship_4: vec u8,
};

type SingleGameState = struct {
  player_board: vec Entity,
  ship_hash: vec u8,
  start_time: u64,
  total_shots: u8,
  succesfull_shots: u8,
  last_move_time: u64,
  verification_requirement: opt u8,
};

type BattleshipParticipants = enum {
  Player,
  Bot,
};

type SingleUtilsStepResult = enum {
  Missed,
  Injured,
  Killed,
};

constructor {
  New : (builtin_bls381: actor_id, verification_key_for_start: VerifyingKeyBytes, verification_key_for_move: VerifyingKeyBytes, config: Configuration);
};

service Admin {
  ChangeAdmin : (new_admin: actor_id) -> null;
  ChangeBuiltinAddress : (new_builtin_address: actor_id) -> null;
  ChangeConfiguration : (configuration: Configuration) -> null;
  ChangeVerificationKey : (new_vk_for_start: opt VerifyingKeyBytes, new_vk_for_move: opt VerifyingKeyBytes) -> null;
  DeleteMultipleGame : (game_id: actor_id) -> null;
  DeleteMultipleGamesByTime : (time: u64) -> null;
  DeleteMultipleGamesInBatches : (divider: u64) -> null;
  DeleteSingleGame : (player_address: actor_id) -> null;
  DeleteSingleGames : (time: u64) -> null;
  Kill : (inheritor: actor_id) -> null;
  query Admin : () -> actor_id;
  query Builtin : () -> actor_id;
  query Configuration : () -> Configuration;
  query VerificationKey : () -> struct { VerifyingKeyBytes, VerifyingKeyBytes };

  events {
    GameDeleted;
    GamesDeleted;
    AdminChanged;
    BuiltinAddressChanged;
    VerificationKeyChanged;
    ConfigurationChanged;
    Killed: struct { inheritor: actor_id };
  }
};

service Multiple {
  CancelGame : (session_for_account: opt actor_id) -> null;
  CheckOutTiming : (game_id: actor_id, check_time: u64) -> null;
  CreateGame : (name: str, session_for_account: opt actor_id) -> null;
  DeleteGame : (game_id: actor_id, create_time: u64) -> null;
  DeletePlayer : (removable_player: actor_id, session_for_account: opt actor_id) -> null;
  JoinGame : (game_id: actor_id, name: str, session_for_account: opt actor_id) -> null;
  LeaveGame : (session_for_account: opt actor_id) -> null;
  MakeMove : (game_id: actor_id, verify_variables: opt VerificationVariables, step: opt u8, session_for_account: opt actor_id) -> null;
  VerifyPlacement : (proof: ProofBytes, public_input: PublicStartInput, session_for_account: opt actor_id, game_id: actor_id) -> null;
  query Game : (player_id: actor_id) -> opt MultipleGameState;
  query Games : () -> vec struct { actor_id, MultipleGameState };
  query GamesPairs : () -> vec struct { actor_id, actor_id };
  query GetRemainingTime : (player_id: actor_id) -> opt u64;

  events {
    GameCreated: struct { player_id: actor_id };
    JoinedTheGame: struct { player_id: actor_id, game_id: actor_id };
    PlacementVerified: struct { admin: actor_id };
    GameCanceled: struct { game_id: actor_id };
    GameLeft: struct { game_id: actor_id };
    MoveMade: struct { game_id: actor_id, step: opt u8, verified_result: opt struct { u8, MultipleUtilsStepResult }, turn: actor_id };
    EndGame: struct { admin: actor_id, winner: actor_id, total_time: u64, participants_info: vec struct { actor_id, ParticipantInfo }, last_hit: opt u8 };
    GameDeleted: struct { game_id: actor_id };
    PlayerDeleted: struct { game_id: actor_id, removable_player: actor_id };
  }
};

service Session {
  CreateSession : (signature_data: SignatureData, signature: opt vec u8) -> null;
  DeleteSessionFromAccount : () -> null;
  DeleteSessionFromProgram : (session_for_account: actor_id) -> null;
  query SessionForTheAccount : (account: actor_id) -> opt Session;
  query Sessions : () -> vec struct { actor_id, Session };

  events {
    SessionCreated;
    SessionDeleted;
  }
};

service Single {
  CheckOutTiming : (actor_id: actor_id, check_time: u64) -> null;
  DeleteGame : (player: actor_id, start_time: u64) -> null;
  MakeMove : (step: opt u8, verify_variables: opt VerificationVariables, session_for_account: opt actor_id) -> null;
  StartSingleGame : (proof: ProofBytes, public_input: PublicStartInput, session_for_account: opt actor_id) -> null;
  query Game : (player_id: actor_id) -> opt SingleGame;
  query Games : () -> vec struct { actor_id, SingleGameState };
  query GetRemainingTime : (player_id: actor_id) -> opt u64;
  query StartTime : (player_id: actor_id) -> opt u64;
  query TotalShots : (player_id: actor_id) -> opt u8;

  events {
    SessionCreated;
    SingleGameStarted;
    EndGame: struct { player: actor_id, winner: BattleshipParticipants, time: u64, total_shots: u8, succesfull_shots: u8, last_hit: opt u8 };
    MoveMade: struct { player: actor_id, step: opt u8, step_result: opt SingleUtilsStepResult, bot_step: opt u8 };
  }
};

