type Config = struct {
  one_point_in_value: u128,
  max_number_gold_coins: u16,
  max_number_silver_coins: u16,
  points_per_gold_coin_easy: u128,
  points_per_silver_coin_easy: u128,
  points_per_gold_coin_medium: u128,
  points_per_silver_coin_medium: u128,
  points_per_gold_coin_hard: u128,
  points_per_silver_coin_hard: u128,
  gas_for_finish_tournament: u64,
  gas_for_mint_fungible_token: u64,
  gas_to_delete_session: u64,
  minimum_session_duration_ms: u64,
  s_per_block: u64,
};

type SignatureData = struct {
  key: actor_id,
  duration: u64,
  allowed_actions: vec ActionsForSession,
};

type ActionsForSession = enum {
  CreateNewTournament,
  RegisterForTournament,
  CancelRegister,
  CancelTournament,
  DeletePlayer,
  FinishSingleGame,
  StartTournament,
  RecordTournamentResult,
  LeaveGame,
};

type SessionData = struct {
  key: actor_id,
  expires: u64,
  allowed_actions: vec ActionsForSession,
  expires_at_block: u32,
};

type Status = enum {
  Paused,
  StartedUnrewarded,
  StartedWithFungibleToken: struct { ft_address: actor_id },
  StartedWithNativeToken,
};

type Level = enum {
  Easy,
  Medium,
  Hard,
};

type VaraManState = struct {
  tournaments: vec struct { actor_id, TournamentState },
  players_to_game_id: vec struct { actor_id, actor_id },
  status: Status,
  config: Config,
  admins: vec actor_id,
  dns_info: opt struct { actor_id, str },
};

type TournamentState = struct {
  tournament_name: str,
  admin: actor_id,
  level: Level,
  participants: vec struct { actor_id, Player },
  bid: u128,
  stage: Stage,
  duration_ms: u32,
};

type Player = struct {
  name: str,
  time: u128,
  points: u128,
};

type Stage = enum {
  Registration,
  Started: u64,
  Finished: vec actor_id,
};

constructor {
  New : (config: Config, dns_id_and_name: opt struct { actor_id, str });
};

service Session {
  CreateSession : (signature_data: SignatureData, signature: opt vec u8) -> null;
  DeleteSessionFromAccount : () -> null;
  DeleteSessionFromProgram : (session_for_account: actor_id) -> null;
  query SessionForTheAccount : (account: actor_id) -> opt SessionData;
  query Sessions : () -> vec struct { actor_id, SessionData };

  events {
    SessionCreated;
    SessionDeleted;
  }
};

service VaraMan {
  AddAdmin : (new_admin_id: actor_id) -> null;
  CancelRegister : (session_for_account: opt actor_id) -> null;
  CancelTournament : (session_for_account: opt actor_id) -> null;
  ChangeConfig : (config: Config) -> null;
  ChangeStatus : (status: Status) -> null;
  CreateNewTournament : (tournament_name: str, name: str, level: Level, duration_ms: u32, session_for_account: opt actor_id) -> null;
  DeletePlayer : (player_id: actor_id, session_for_account: opt actor_id) -> null;
  FinishSingleGame : (gold_coins: u16, silver_coins: u16, level: Level, session_for_account: opt actor_id) -> null;
  FinishTournament : (admin_id: actor_id, time_start: u64) -> null;
  Kill : (inheritor: actor_id) -> null;
  LeaveGame : (session_for_account: opt actor_id) -> null;
  RecordTournamentResult : (time: u128, gold_coins: u16, silver_coins: u16, session_for_account: opt actor_id) -> null;
  RegisterForTournament : (admin_id: actor_id, name: str, session_for_account: opt actor_id) -> null;
  StartTournament : (session_for_account: opt actor_id) -> null;
  query Admins : () -> vec actor_id;
  query All : () -> VaraManState;
  query Config : () -> Config;
  query GetTournament : (player_id: actor_id) -> opt struct { TournamentState, opt u64 };
  query Status : () -> Status;

  events {
    GameFinished: struct { winners: vec actor_id, participants: vec struct { actor_id, Player }, prize: u128 };
    SingleGameFinished: struct { gold_coins: u16, silver_coins: u16, points: u128, maximum_possible_points: u128, maximum_number_gold_coins: u16, maximum_number_silver_coins: u16, prize: u128 };
    NewTournamentCreated: struct { tournament_name: str, name: str, level: Level, bid: u128 };
    PlayerRegistered: struct { admin_id: actor_id, name: str, bid: u128 };
    RegisterCanceled;
    TournamentCanceled: struct { admin_id: actor_id };
    PlayerDeleted: struct { player_id: actor_id };
    ResultTournamentRecorded: struct { gold_coins: u16, silver_coins: u16, time: u128, points: u128, maximum_possible_points: u128, maximum_number_gold_coins: u16, maximum_number_silver_coins: u16 };
    GameStarted;
    AdminAdded: actor_id;
    StatusChanged: Status;
    ConfigChanged: Config;
    LeftGame;
    Killed: struct { inheritor: actor_id };
  }
};

